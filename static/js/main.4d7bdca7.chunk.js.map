{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","parsedJSON","list","map","data","id","concat","weather","datetime","dt_txt","temp","main","temp_min","temp_max","setState","isLoaded","catch","error","console","log","react_default","a","createElement","className","Table_default","striped","bordered","hover","size","length","item","key","Component","App","src_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRA6EeA,cAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAHQR,mFAMC,IAAAS,EAAAN,KAClBO,MACE,kIAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAU,OACdA,EAAWC,KAAKC,IAAI,SAAAC,GAAI,MAAK,CAC3BC,GAAE,GAAAC,OAAKF,EAAKG,QAAQF,IACpBG,SAAQ,GAAAF,OAAKF,EAAKK,QAClBC,KAAI,GAAAJ,OAAKF,EAAKO,KAAKD,MACnBE,SAAQ,GAAAN,OAAKF,EAAKO,KAAKC,UACvBC,SAAQ,GAAAP,OAAKF,EAAKO,KAAKE,UACvBN,QAAO,GAAAD,OAAKF,EAAKG,QAAQ,GAAGI,WAG/Bb,KAAK,SAAAH,GAAK,OACTC,EAAKkB,SAAS,CACZnB,QACAoB,UAAU,MAGbC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,sCAEzC,IACCtB,EAAUL,KAAKI,MAAfC,MACR,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOI,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjCR,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aACG3B,EAAMkC,OAAS,EACZlC,EAAMQ,IAAI,SAAA2B,GAAQ,IAEdzB,EAMEyB,EANFzB,GACAG,EAKEsB,EALFtB,SACAE,EAIEoB,EAJFpB,KACAE,EAGEkB,EAHFlB,SACAC,EAEEiB,EAFFjB,SACAN,EACEuB,EADFvB,QAEF,OACEa,EAAAC,EAAAC,cAAA,MAAIS,IAAK1B,GACPe,EAAAC,EAAAC,cAAA,UAAKd,GACLY,EAAAC,EAAAC,cAAA,UAAKZ,GACLU,EAAAC,EAAAC,cAAA,UAAKV,GACLQ,EAAAC,EAAAC,cAAA,UAAKT,GACLO,EAAAC,EAAAC,cAAA,UAAKf,MAIX,eAlEGyB,aCOJC,MANf,WACE,OACEb,EAAAC,EAAAC,cAACY,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.4d7bdca7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://api.openweathermap.org/data/2.5/forecast?q=Yogyakarta,id&mode=json&appid=526c35fc9710f817d6138e209196ad02&units=metric\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(parsedJSON =>\r\n        parsedJSON.list.map(data => ({\r\n          id: `${data.weather.id}`,\r\n          datetime: `${data.dt_txt}`,\r\n          temp: `${data.main.temp}`,\r\n          temp_min: `${data.main.temp_min}`,\r\n          temp_max: `${data.main.temp_max}`,\r\n          weather: `${data.weather[0].main}`\r\n        }))\r\n      )\r\n      .then(items =>\r\n        this.setState({\r\n          items,\r\n          isLoaded: false\r\n        })\r\n      )\r\n      .catch(error => console.log(\"parsing failed\", error));\r\n  }\r\n  render() {\r\n    const { items } = this.state;\r\n    return (\r\n      <div className=\"tengah\">\r\n        <h1>Prakiraan Cuaca Yogyakarta </h1>\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date Time</th>\r\n              <th>Temperature</th>\r\n              <th>Temp min</th>\r\n              <th>Temp max</th>\r\n              <th>weather</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {items.length > 0\r\n              ? items.map(item => {\r\n                  const {\r\n                    id,\r\n                    datetime,\r\n                    temp,\r\n                    temp_min,\r\n                    temp_max,\r\n                    weather\r\n                  } = item;\r\n                  return (\r\n                    <tr key={id}>\r\n                      <td>{datetime}</td>\r\n                      <td>{temp}</td>\r\n                      <td>{temp_min}</td>\r\n                      <td>{temp_max}</td>\r\n                      <td>{weather}</td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}